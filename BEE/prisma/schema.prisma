generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  userId       Int       @id @default(autoincrement()) @map("user_id")
  oldUserId    Int?      @unique @map("old_user_id")
  username     String    @unique @db.VarChar(50)
  email        String?   @db.VarChar(120) // 1 user c√≥ th·ªÉ c√≥ ho·∫∑c kh√¥ng c√≥ email
  passwordHash String    @map("password_hash") @db.VarChar(255)
  avatarId     Int?      @map("avatar_id")
  firstName    String    @map("first_name") @db.VarChar(50)
  lastName     String    @map("last_name") @db.VarChar(100)
  isActive     Boolean   @default(true) @map("is_active")
  lastLoginAt  DateTime? @map("last_login_at") @db.Timestamp(0)
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt    DateTime  @updatedAt @map("updated_at") @db.Timestamp(0)

  // NEW: tr·∫°ng th√°i x√°c minh email
  isEmailVerified Boolean   @default(false) @map("is_email_verified")
  emailVerifiedAt DateTime? @map("email_verified_at") @db.Timestamp(0)

  // relations kh√°c gi·ªØ nguy√™n‚Ä¶
  avatar                 Image?                   @relation("UserAvatar", fields: [avatarId], references: [imageId], onDelete: SetNull)
  student                Student?                 @relation("UserStudent")
  admin                  Admin?                   @relation("UserAdmin")
  UserRefreshToken       UserRefreshToken[]
  userRoles              UserRole[]
  assignedUserRoles      UserRole[]               @relation("UserRoleAssigner")
  EmailVerificationToken EmailVerificationToken[]

  @@index([lastName, firstName], map: "idx_users_name")
  @@index([avatarId], map: "idx_users_avatar_id")
  @@map("users")
}

model EmailVerificationToken {
  id         String    @id @default(uuid())
  userId     Int
  tokenHash  String    @db.VarChar(255) // L∆ØU HASH thay v√¨ raw token
  expiresAt  DateTime
  createdAt  DateTime  @default(now())
  consumedAt DateTime?

  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@unique([userId]) // m·ªói user ch·ªâ c√≥ 1 token ƒëang ch·ªù (n·∫øu mu·ªën cho ph√©p nhi·ªÅu l·∫ßn song song, b·ªè unique n√†y)
  @@map("email_verification_tokens")
}

model Student {
  studentId    Int     @id @default(autoincrement()) @map("student_id")
  userId       Int     @unique @map("user_id")
  user         User    @relation("UserStudent", fields: [userId], references: [userId], onDelete: Cascade)
  studentPhone String? @map("student_phone") @db.VarChar(15)
  parentPhone  String? @map("parent_phone") @db.VarChar(15)
  grade        Int     @db.TinyInt
  school       String? @map("school") @db.VarChar(120)

  @@index([grade, school], map: "idx_students_grade_school")
  @@map("students")
}

model Admin {
  adminId   Int  @id @default(autoincrement()) @map("admin_id")
  userId    Int  @unique @map("user_id")
  user      User @relation("UserAdmin", fields: [userId], references: [userId], onDelete: Cascade)
  subjectId Int? @map("subject_id")

  // Relations
  subject       Subject?        @relation("AdminSubject", fields: [subjectId], references: [subjectId], onDelete: SetNull)
  AdminAuditLog AdminAuditLog[]
  Document      Document[]
  QuestionImage QuestionImage[]
  SolutionImage SolutionImage[]
  MediaImage    MediaImage[]
  Exam          Exam[]          @relation("ExamCreatedBy")
  Competition   Competition[]   @relation("CompetitionCreatedBy")
  Course        Course[]        @relation("CourseTeacher")
  Lesson        Lesson[]        @relation("LessonTeacher")
  Question      Question[]      @relation("QuestionCreatedBy")

  @@index([subjectId], map: "idx_admins_subject_id")
  @@map("admins")
}

model Role {
  roleId           Int      @id @default(autoincrement()) @map("role_id")
  roleName         String   @unique @map("role_name") @db.VarChar(50)
  description      String?  @db.VarChar(255)
  isAssignable     Boolean  @default(true) @map("is_assignable") // role c√≥ th·ªÉ ƒë∆∞·ª£c c·∫•p hay kh√¥ng
  requiredByRoleId Int?     @map("required_by_role_id") // c·∫ßn c√≥ role n√†o ƒë·ªÉ c·∫•p role n√†y
  createdAt        DateTime @default(now()) @map("created_at") @db.Timestamp(0)

  // back-relations
  userRoles      UserRole[] // N‚ÄìN qua b·∫£ng n·ªëi
  // Self-reference cho role hierarchy
  requiredByRole Role?      @relation("RoleHierarchy", fields: [requiredByRoleId], references: [roleId], onDelete: SetNull)
  childRoles     Role[]     @relation("RoleHierarchy") // Roles m√† role n√†y c√≥ th·ªÉ c·∫•p

  @@index([requiredByRoleId], map: "idx_roles_required_by")
  @@map("roles")
}

model UserRole {
  userId     Int       @map("user_id")
  roleId     Int       @map("role_id")
  assignedAt DateTime  @default(now()) @map("assigned_at") @db.Timestamp(0)
  expiresAt  DateTime? @map("expires_at") @db.Timestamp(0) // null = kh√¥ng h·∫øt h·∫°n
  assignedBy Int?      @map("assigned_by") // user n√†o c·∫•p role n√†y
  isActive   Boolean   @default(true) @map("is_active")

  // Relations
  user           User  @relation(fields: [userId], references: [userId], onDelete: Cascade)
  role           Role  @relation(fields: [roleId], references: [roleId], onDelete: Cascade)
  assignedByUser User? @relation("UserRoleAssigner", fields: [assignedBy], references: [userId], onDelete: SetNull)

  @@id([userId, roleId]) // kh√≥a ch√≠nh t·ªïng h·ª£p
  @@index([roleId], map: "idx_user_roles_role_id")
  @@index([userId, isActive], map: "idx_user_roles_user_active")
  @@index([expiresAt], map: "idx_user_roles_expires")
  @@index([assignedBy], map: "idx_user_roles_assigned_by")
  @@map("user_roles")
}

model UserRefreshToken {
  tokenId           Int       @id @default(autoincrement()) @map("token_id")
  userId            Int       @map("user_id")
  familyId          String    @map("family_id") @db.VarChar(36) // UUID text
  tokenHash         String    @unique @map("token_hash") @db.Char(60) // bcrypt/argon2 hash
  expiresAt         DateTime  @map("expires_at") @db.Timestamp(0)
  createdAt         DateTime  @default(now()) @map("created_at") @db.Timestamp(0)
  lastUsedAt        DateTime? @map("last_used_at") @db.Timestamp(0)
  revokedAt         DateTime? @map("revoked_at") @db.Timestamp(0)
  replacedByTokenId Int?      @map("replaced_by_token")
  userAgent         String?   @map("user_agent") @db.VarChar(255)
  ipAddress         String?   @map("ip_address") @db.VarChar(45)
  deviceFingerprint String?   @map("device_fingerprint") @db.VarChar(128)

  // Quan h·ªá
  user            User               @relation(fields: [userId], references: [userId], onDelete: Cascade)
  replacedByToken UserRefreshToken?  @relation("UserTokenReplace", fields: [replacedByTokenId], references: [tokenId])
  replaces        UserRefreshToken[] @relation("UserTokenReplace") // back-rel cho self-FK

  @@index([userId], map: "idx_user_tokens_user_id")
  @@index([familyId], map: "idx_user_tokens_family_id")
  @@index([expiresAt], map: "idx_user_tokens_expires_at")
  @@index([revokedAt], map: "idx_user_tokens_revoked_at")
  @@map("user_refresh_tokens")
}

enum AuditStatus {
  SUCCESS // ‚úÖ Th√†nh c√¥ng
  FAIL // ‚ùå Th·∫•t b·∫°i
  ROLLBACK // üîÑ ƒê√£ rollback
}

enum CourseVisibility {
  DRAFT
  PRIVATE
  PUBLISHED
}

model AdminAuditLog {
  logId        Int         @id @default(autoincrement()) @map("log_id")
  adminId      Int         @map("admin_id")
  actionKey    String      @map("action_key") @db.VarChar(64)
  status       AuditStatus @default(SUCCESS) @map("status")
  errorMessage String?     @map("error_message") @db.Text
  resourceType String      @map("resource_type") @db.VarChar(64)
  resourceId   String?     @map("resource_id") @db.VarChar(64)
  beforeData   Json?       @map("before_data")
  afterData    Json?       @map("after_data")
  createdAt    DateTime    @default(now()) @map("created_at") @db.Timestamp(0)

  // quan h·ªá
  admin Admin @relation(fields: [adminId], references: [adminId], onDelete: Cascade)

  // indexes
  @@index([adminId, createdAt], map: "idx_admin_audit_admin_created")
  @@index([resourceType, resourceId], map: "idx_admin_audit_resource")
  @@index([actionKey, createdAt], map: "idx_admin_audit_action_created")
  @@index([status], map: "idx_admin_audit_status")
  @@map("admin_audit_logs")
}

enum StorageProvider {
  LOCAL
  S3
  GCS
  SUPABASE
  EXTERNAL
}

model Document {
  documentId      Int             @id @default(autoincrement()) @map("document_id")
  adminId         Int?            @map("admin_id")
  admin           Admin?          @relation(fields: [adminId], references: [adminId], onDelete: SetNull)
  description     String?         @db.Text
  url             String          @db.VarChar(500)
  anotherUrl      String?         @map("another_url") @db.VarChar(500) // URL ph·ª•
  mimeType        String?         @map("mime_type") @db.VarChar(100)
  subjectId       Int?            @map("subject_id")
  relatedType     String?         @map("related_type") @db.VarChar(50)
  relatedId       Int?            @map("related_id")
  storageProvider StorageProvider @default(EXTERNAL) @map("storage_provider")
  createdAt       DateTime        @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt       DateTime        @updatedAt @map("updated_at") @db.Timestamp(0)

  // Relations
  subject      Subject?       @relation("DocumentSubject", fields: [subjectId], references: [subjectId], onDelete: SetNull)
  LearningItem LearningItem[]

  @@index([relatedType, relatedId], map: "idx_documents_related")
  @@index([createdAt], map: "idx_documents_created_at")
  @@index([subjectId], map: "idx_documents_subject_id")
  @@map("documents")
}

model QuestionImage {
  imageId         Int             @id @default(autoincrement()) @map("image_id")
  adminId         Int?            @map("admin_id")
  admin           Admin?          @relation(fields: [adminId], references: [adminId], onDelete: SetNull)
  url             String          @unique @db.VarChar(500)
  anotherUrl      String?         @map("another_url") @db.VarChar(500) // URL ph·ª•
  mimeType        String?         @map("mime_type") @db.VarChar(100)
  storageProvider StorageProvider @default(EXTERNAL) @map("storage_provider")
  relatedType     String?         @map("related_type") @db.VarChar(50)
  relatedId       Int?            @map("related_id")
  createdAt       DateTime        @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt       DateTime        @updatedAt @map("updated_at") @db.Timestamp(0)

  @@index([relatedType, relatedId], map: "idx_images_related")
  @@index([createdAt], map: "idx_images_created_at")
  @@map("question_images")
}

model SolutionImage {
  imageId         Int             @id @default(autoincrement()) @map("image_id")
  adminId         Int?            @map("admin_id")
  admin           Admin?          @relation(fields: [adminId], references: [adminId], onDelete: SetNull)
  url             String          @unique @db.VarChar(500)
  anotherUrl      String?         @map("another_url") @db.VarChar(500) // URL ph·ª•
  mimeType        String?         @map("mime_type") @db.VarChar(100)
  storageProvider StorageProvider @default(EXTERNAL) @map("storage_provider")
  createdAt       DateTime        @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt       DateTime        @updatedAt @map("updated_at") @db.Timestamp(0)

  @@index([createdAt], map: "idx_images_created_at")
  @@map("solution_images")
}

model MediaImage {
  imageId         Int             @id @default(autoincrement()) @map("image_id")
  adminId         Int?            @map("admin_id")
  admin           Admin?          @relation(fields: [adminId], references: [adminId], onDelete: SetNull)
  url             String          @unique @db.VarChar(500)
  anotherUrl      String?         @map("another_url") @db.VarChar(500) // URL ph·ª•
  mimeType        String?         @map("mime_type") @db.VarChar(100)
  storageProvider StorageProvider @default(EXTERNAL) @map("storage_provider")
  createdAt       DateTime        @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt       DateTime        @updatedAt @map("updated_at") @db.Timestamp(0)

  @@index([createdAt], map: "idx_images_created_at")
  @@map("media_images")
}

model Image {
  imageId         Int             @id @default(autoincrement()) @map("image_id")
  adminId         Int?            @map("admin_id")
  url             String          @unique @db.VarChar(500)
  anotherUrl      String?         @map("another_url") @db.VarChar(500) // URL ph·ª•
  mimeType        String?         @map("mime_type") @db.VarChar(100)
  storageProvider StorageProvider @default(EXTERNAL) @map("storage_provider")
  createdAt       DateTime        @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt       DateTime        @updatedAt @map("updated_at") @db.Timestamp(0)

  // Relations
  userAvatars User[] @relation("UserAvatar")

  @@index([createdAt], map: "idx_images_created_at")
  @@map("images")
}

enum LearningItemType {
  HOMEWORK
  DOCUMENT
  YOUTUBE
  EXERCISE
}

model Subject {
  subjectId Int     @id @default(autoincrement()) @map("subject_id")
  name      String  @unique
  code      String? @unique

  // Relations
  chapters  Chapter[]
  admins    Admin[]    @relation("AdminSubject")
  documents Document[] @relation("DocumentSubject")
  exams     Exam[]     @relation("ExamSubject")
  questions Question[] @relation("QuestionSubject")
  courses   Course[]   @relation("CourseSubject")

  @@index([name], map: "idx_subjects_name")
  @@map("subjects")
}

model Chapter {
  chapterId       Int     @id @default(autoincrement()) @map("chapter_id")
  subjectId       Int     @map("subject_id")
  code            String? @unique
  name            String
  slug            String  @unique // v√≠ d·ª•: "ham-so", "dao-ham"
  parentChapterId Int?    @map("parent_chapter_id") // self-FK
  // Th·ª© t·ª± ch·ªâ trong c√πng 1 cha (kh√¥ng n√™n unique to√†n b·∫£ng)
  orderInParent   Int     @map("order_in_parent")

  // Tu·ª≥ ch·ªçn: c·∫•p ƒë·ªô ƒë·ªÉ hi·ªÉn th·ªã nhanh (0=root, 1=con c·ªßa root, ...)
  level Int @default(0)

  // Quan h·ªá
  subject   Subject    @relation(fields: [subjectId], references: [subjectId], onDelete: Cascade)
  parent    Chapter?   @relation("ChapterToChildren", fields: [parentChapterId], references: [chapterId], onDelete: Cascade)
  children  Chapter[]  @relation("ChapterToChildren")
  questions Question[] @relation("QuestionChapter")

  @@unique([subjectId, name, parentChapterId]) // t√™n ch∆∞∆°ng kh√¥ng tr√πng trong c√πng 1 cha c·ªßa 1 m√¥n
  @@unique([subjectId, parentChapterId, orderInParent]) // ƒë·∫£m b·∫£o th·ª© t·ª± duy nh·∫•t trong nh√≥m anh/ch·ªã em
  @@index([subjectId], map: "idx_chapters_subject_id")
  @@index([parentChapterId], map: "idx_chapters_parent_id")
  @@map("chapters")
}

model Exam {
  examId         Int      @id @default(autoincrement()) @map("exam_id") @db.Int
  title          String   @map("title") @db.VarChar(255)
  description    String?  @map("description") @db.Text
  grade          Int      @map("grade") @db.TinyInt
  subjectId      Int?     @map("subject_id")
  fileId         Int?     @map("file_id")
  solutionFileId Int?     @map("solution_file_id")
  createdBy      Int      @map("created_by")
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt      DateTime @updatedAt @map("updated_at") @db.Timestamp(0)

  // Relations
  subject      Subject?       @relation("ExamSubject", fields: [subjectId], references: [subjectId], onDelete: SetNull)
  admin        Admin          @relation("ExamCreatedBy", fields: [createdBy], references: [adminId], onDelete: Cascade)
  competitions Competition[]
  questions    QuestionExam[]

  @@index([grade, subjectId], map: "idx_exams_grade_subject")
  @@index([subjectId], map: "idx_exams_subject_id")
  @@index([createdBy], map: "idx_exams_created_by")
  @@index([createdAt], map: "idx_exams_created_at")
  @@map("exams")
}

enum QuestionType {
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  FILL_IN_THE_BLANK
  SHORT_ANSWER
  ESSAY
}

enum Difficulty {
  TH
  NB
  VD
  VDC
}

model Question {
  questionId         Int          @id @default(autoincrement()) @map("question_id")
  content            String       @map("content") @db.Text
  type               QuestionType @map("type")
  imageId            Int?         @map("image_id")
  correctAnswer      String?      @map("correct_answer") @db.Text
  solution           String?      @map("solution") @db.Text
  chapterId          Int?         @map("chapter_id")
  difficulty         Difficulty   @map("difficulty")
  solutionYoutubeUrl String?      @map("solution_youtube_url") @db.VarChar(500)
  solutionImageId    Int?         @map("solution_image_id")
  grade              Int          @map("grade") @db.TinyInt
  subjectId          Int?         @map("subject_id")
  createdBy          Int?         @map("created_by") // admin t·∫°o c√¢u h·ªèi
  createdAt          DateTime     @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt          DateTime     @updatedAt @map("updated_at") @db.Timestamp(0)

  // Relations
  subject       Subject?       @relation("QuestionSubject", fields: [subjectId], references: [subjectId], onDelete: SetNull)
  chapter       Chapter?       @relation("QuestionChapter", fields: [chapterId], references: [chapterId], onDelete: SetNull)
  admin         Admin?         @relation("QuestionCreatedBy", fields: [createdBy], references: [adminId], onDelete: SetNull)
  statements    Statement[]
  examQuestions QuestionExam[]

  @@index([subjectId, grade], map: "idx_questions_subject_grade")
  @@index([subjectId], map: "idx_questions_subject_id")
  @@index([chapterId], map: "idx_questions_chapter_id")
  @@index([type], map: "idx_questions_type")
  @@index([difficulty], map: "idx_questions_difficulty")
  @@index([createdBy], map: "idx_questions_created_by")
  @@index([createdAt], map: "idx_questions_created_at")
  @@map("questions")
}

model Statement {
  statementId Int         @id @default(autoincrement()) @map("statement_id")
  content     String      @map("content") @db.Text
  questionId  Int         @map("question_id")
  isCorrect   Boolean     @map("is_correct")
  order       Int?        @map("order")
  difficulty  Difficulty? @map("difficulty")
  imageId     Int?        @map("image_id")
  createdAt   DateTime    @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt   DateTime    @updatedAt @map("updated_at") @db.Timestamp(0)

  // Relations
  question Question @relation(fields: [questionId], references: [questionId], onDelete: Cascade)

  @@index([questionId], map: "idx_statements_question_id")
  @@index([isCorrect], map: "idx_statements_is_correct")
  @@map("statements")
}

model QuestionExam {
  questionId Int      @map("question_id")
  examId     Int      @map("exam_id")
  order      Int      @map("order") // th·ª© t·ª± c√¢u h·ªèi trong ƒë·ªÅ thi
  points     Int?     @map("points") // ƒëi·ªÉm s·ªë ri√™ng cho c√¢u h·ªèi n√†y 
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamp(0)

  // Relations
  question Question @relation(fields: [questionId], references: [questionId], onDelete: Cascade)
  exam     Exam     @relation(fields: [examId], references: [examId], onDelete: Cascade)

  @@id([questionId, examId])
  @@index([examId], map: "idx_question_exams_exam_id")
  @@index([questionId], map: "idx_question_exams_question_id")
  @@map("questions_exams")
}

model Competition {
  competitionId Int      @id @default(autoincrement()) @map("competition_id") @db.Int
  examId        Int?     @map("exam_id") @db.Int
  title         String   @map("title") @db.VarChar(255)
  subtitle      String?  @map("subtitle") @db.VarChar(255)
  startDate     DateTime @map("start_date") @db.Timestamp(0)
  endDate       DateTime @map("end_date") @db.Timestamp(0)
  policies      String?  @map("policies") @db.Text
  createdBy     Int      @map("created_by")
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt     DateTime @updatedAt @map("updated_at") @db.Timestamp(0)

  // Relations
  exam         Exam?          @relation(fields: [examId], references: [examId], onDelete: Cascade)
  admin        Admin          @relation("CompetitionCreatedBy", fields: [createdBy], references: [adminId], onDelete: Cascade)
  LearningItem LearningItem[]

  @@index([examId], map: "idx_competitions_exam_id")
  @@index([startDate, endDate], map: "idx_competitions_date_range")
  @@index([createdBy], map: "idx_competitions_created_by")
  @@index([createdAt], map: "idx_competitions_created_at")
  @@map("competitions")
}

model LearningItem {
  learningItemId Int              @id @default(autoincrement()) @map("learning_item_id")
  type           LearningItemType @map("type")
  title          String           @map("title") @db.VarChar(255)
  description    String?          @map("description") @db.Text
  documentId     Int?             @map("document_id")
  competitionId  Int?             @map("competition_id") @db.Int
  createdAt      DateTime         @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt      DateTime         @updatedAt @map("updated_at") @db.Timestamp(0)

  // Relations
  document    Document?            @relation(fields: [documentId], references: [documentId], onDelete: Cascade)
  competition Competition?         @relation(fields: [competitionId], references: [competitionId], onDelete: Cascade)
  lessons     LessonLearningItem[]

  @@index([type], map: "idx_learning_items_type")
  @@index([createdAt], map: "idx_learning_items_created_at")
  @@map("learning_items")
}

model Course {
  courseId       Int              @id @default(autoincrement()) @map("course_id")
  title          String           @map("title") @db.VarChar(200)
  subtitle       String?          @map("subtitle") @db.VarChar(255)
  thumbImageId   Int?             @map("thumb_image_id")
  academicYear   String?          @map("academic_year") @db.VarChar(9) // v√≠ d·ª• '2024-2025'
  grade          String?          @map("grade") @db.VarChar(10) // v√≠ d·ª• '12'
  subjectId      Int?             @map("subject_id")
  priceCents     Int              @default(0) @map("price_cents")
  compareAtCents Int?             @map("compare_at_cents")
  visibility     CourseVisibility @default(DRAFT) @map("visibility")
  teacherId      Int?             @map("teacher_id") // FK t·ªõi admin_users n·∫øu admin l√† gi·∫£ng vi√™n
  isUpdatable    Boolean          @default(true) @map("is_updatable")
  createdAt      DateTime         @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt      DateTime         @updatedAt @map("updated_at") @db.Timestamp(0)

  // Relations
  subject   Subject?         @relation("CourseSubject", fields: [subjectId], references: [subjectId], onDelete: SetNull)
  teacher   Admin?           @relation("CourseTeacher", fields: [teacherId], references: [adminId], onDelete: SetNull)
  schedules CourseSchedule[]
  lessons   Lesson[]

  @@index([visibility], map: "idx_courses_visibility")
  @@index([grade, subjectId], map: "idx_courses_grade_subject")
  @@index([subjectId], map: "idx_courses_subject_id")
  @@index([teacherId], map: "idx_courses_teacher_id")
  @@index([createdAt], map: "idx_courses_created_at")
  @@map("courses")
}

model CourseSchedule {
  scheduleId Int      @id @default(autoincrement()) @map("schedule_id")
  courseId   Int      @map("course_id")
  dayOfWeek  Int      @map("day_of_week") @db.TinyInt // 1=Mon ... 7=Sun
  startTime  DateTime @map("start_time") @db.Time
  endTime    DateTime @map("end_time") @db.Time
  room       String?  @map("room") @db.VarChar(100)

  // Relations
  course Course @relation(fields: [courseId], references: [courseId], onDelete: Cascade)

  @@unique([courseId, dayOfWeek, startTime], map: "unique_course_schedule")
  @@index([courseId], map: "idx_course_schedules_course_id")
  @@map("courses_schedules")
}

model Lesson {
  lessonId    Int       @id @default(autoincrement()) @map("lesson_id")
  courseId    Int       @map("course_id")
  title       String    @map("title") @db.VarChar(200)
  description String?   @map("description") @db.Text
  teacherId   Int?      @map("teacher_id") // n·∫øu b√†i h·ªçc do GV kh√°c d·∫°y
  scheduledAt DateTime? @map("scheduled_at") @db.DateTime // n·∫øu b·∫°n mu·ªën g·∫Øn ng√†y/gi·ªù c·ª• th·ªÉ
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt   DateTime  @updatedAt @map("updated_at") @db.Timestamp(0)

  // Relations
  course        Course               @relation(fields: [courseId], references: [courseId], onDelete: Cascade)
  teacher       Admin?               @relation("LessonTeacher", fields: [teacherId], references: [adminId], onDelete: SetNull)
  learningItems LessonLearningItem[]

  @@index([courseId], map: "idx_lessons_course_id")
  @@index([teacherId], map: "idx_lessons_teacher_id")
  @@index([scheduledAt], map: "idx_lessons_scheduled_at")
  @@index([createdAt], map: "idx_lessons_created_at")
  @@map("lessons")
}

model LessonLearningItem {
  lessonId       Int      @map("lesson_id")
  learningItemId Int      @map("learning_item_id")
  order          Int?     @map("order")
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamp(0)

  // Relations
  lesson       Lesson       @relation(fields: [lessonId], references: [lessonId], onDelete: Cascade)
  learningItem LearningItem @relation(fields: [learningItemId], references: [learningItemId], onDelete: Cascade)

  @@id([lessonId, learningItemId])
  @@index([lessonId], map: "idx_lesson_learning_items_lesson")
  @@index([learningItemId], map: "idx_lesson_learning_items_learning_item")
  @@map("lesson_learning_items")
}
