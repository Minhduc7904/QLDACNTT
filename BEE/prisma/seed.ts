import { PrismaClient } from '@prisma/client';
import * as bcrypt from 'bcryptjs';

const prisma = new PrismaClient();

async function main() {
    console.log('üå± Starting seed...');

    // 1. T·∫°o roles v·ªõi hierarchy
    console.log('üìù Seeding roles...');
    const superAdminRole = await prisma.role.upsert({
        where: { roleName: 'SUPER_ADMIN' },
        update: {},
        create: {
            roleName: 'SUPER_ADMIN',
            description: 'Super Administrator - c√≥ th·ªÉ c·∫•p m·ªçi role',
            isAssignable: false,
            requiredByRoleId: null, // Kh√¥ng c·∫ßn role n√†o
        },
    });

    const adminRole = await prisma.role.upsert({
        where: { roleName: 'ADMIN' },
        update: {},
        create: {
            roleName: 'ADMIN',
            description: 'System Administrator',
            isAssignable: true,
            requiredByRoleId: superAdminRole.roleId, // Ch·ªâ SUPER_ADMIN m·ªõi c·∫•p ƒë∆∞·ª£c
        },
    });

    const permissionsUserRole = await prisma.role.upsert({
        where: { roleName: 'PERMISSIONS_USER' },
        update: {},
        create: {
            roleName: 'PERMISSIONS_USER',
            description: 'User c√≥ th·ªÉ qu·∫£n l√Ω quy·ªÅn c·ªßa ng∆∞·ªùi d√πng kh√°c',
            isAssignable: true,
            requiredByRoleId: adminRole.roleId, // Ch·ªâ ADMIN m·ªõi c·∫•p ƒë∆∞·ª£c
        },
    });

    const teacherRole = await prisma.role.upsert({
        where: { roleName: 'TEACHER' },
        update: {},
        create: {
            roleName: 'TEACHER',
            description: 'Teacher/Instructor',
            isAssignable: true,
            requiredByRoleId: permissionsUserRole.roleId, // Ph·∫£i c√≥ quy·ªÅn c·∫•p role m·ªõi c·∫•p ƒë∆∞·ª£c
        },
    });

    const studentRole = await prisma.role.upsert({
        where: { roleName: 'STUDENT' },
        update: {},
        create: {
            roleName: 'STUDENT',
            description: 'Student',
            isAssignable: true,
            requiredByRoleId: permissionsUserRole.roleId, // Ph·∫£i c√≥ quy·ªÅn c·∫•p role m·ªõi c·∫•p ƒë∆∞·ª£c
        },
    });

    console.log(`‚úÖ Roles created: ${superAdminRole.roleName}, ${adminRole.roleName}, ${teacherRole.roleName}, ${studentRole.roleName}`);

    // 2. T·∫°o admin users
    console.log('üë§ Seeding admin users...');
    const hashedPassword = await bcrypt.hash('070904', 10);

    const superAdminUser = await prisma.user.upsert({
        where: { username: 'minhduc7904' },
        update: {},
        create: {
            username: 'minhduc7904',
            email: 'nmduc7904@gmail.com',
            passwordHash: hashedPassword,
            firstName: 'ƒê·ª©c',
            lastName: 'Nguy·ªÖn Minh',
        },
    });

    const adminUser = await prisma.user.upsert({
        where: { username: 'admin' },
        update: {},
        create: {
            username: 'admin',
            email: 'admin@bee.edu.vn',
            passwordHash: hashedPassword,
            firstName: 'Admin',
            lastName: 'User',
        },
    });

    // 3. T·∫°o admin records
    const superAdmin = await prisma.admin.upsert({
        where: { userId: superAdminUser.userId },
        update: {},
        create: {
            userId: superAdminUser.userId,
        },
    });

    const adminRecord = await prisma.admin.upsert({
        where: { userId: adminUser.userId },
        update: {},
        create: {
            userId: adminUser.userId,
        },
    });

    // 4. G√°n roles cho admins b·∫±ng UserRole
    await prisma.userRole.upsert({
        where: {
            userId_roleId: {
                userId: superAdminUser.userId,
                roleId: superAdminRole.roleId,
            },
        },
        update: {},
        create: {
            userId: superAdminUser.userId,
            roleId: superAdminRole.roleId,
            assignedBy: null, // T·ª± c·∫•p
            expiresAt: null, // Vƒ©nh vi·ªÖn
        },
    });

    await prisma.userRole.upsert({
        where: {
            userId_roleId: {
                userId: adminUser.userId,
                roleId: adminRole.roleId,
            },
        },
        update: {},
        create: {
            userId: adminUser.userId,
            roleId: adminRole.roleId,
            assignedBy: superAdminUser.userId, // ƒê∆∞·ª£c SUPER_ADMIN c·∫•p
            expiresAt: null, // Vƒ©nh vi·ªÖn
        },
    });

    await prisma.userRole.upsert({
        where: {
            userId_roleId: {
                userId: adminUser.userId,
                roleId: permissionsUserRole.roleId,
            },
        },
        update: {},
        create: {
            userId: adminUser.userId,
            roleId: permissionsUserRole.roleId,
            assignedBy: superAdminUser.userId, // ƒê∆∞·ª£c SUPER_ADMIN c·∫•p th√™m role PERMISSIONS_USER
            expiresAt: null,
        },
    });

    await prisma.userRole.upsert({
        where: {
            userId_roleId: {
                userId: adminUser.userId,
                roleId: teacherRole.roleId,
            },
        },
        update: {},
        create: {
            userId: adminUser.userId,
            roleId: teacherRole.roleId,
            assignedBy: superAdminUser.userId, // ƒê∆∞·ª£c SUPER_ADMIN c·∫•p th√™m role TEACHER
            expiresAt: null,
        },
    });

    console.log(`‚úÖ Admin users created: ${superAdminUser.username}, ${adminUser.username}`);

    // 5. T·∫°o student users
    console.log('üë®‚Äçüéì Seeding student users...');
    const studentPassword = await bcrypt.hash('student123', 10);

    const studentUser1 = await prisma.user.upsert({
        where: { username: 'student1' },
        update: {},
        create: {
            username: 'student1',
            email: 'nmduc7904@gmail.com',
            passwordHash: studentPassword,
            firstName: 'Nguy·ªÖn',
            lastName: 'VƒÉn A',
        },
    });

    const studentUser2 = await prisma.user.upsert({
        where: { username: 'student2' },
        update: {},
        create: {
            username: 'student2',
            email: 'nmduc7904@gmail.com',
            passwordHash: studentPassword,
            firstName: 'Tr·∫ßn',
            lastName: 'Th·ªã B',
        },
    });

    // 6. T·∫°o student records
    const student1 = await prisma.student.upsert({
        where: { userId: studentUser1.userId },
        update: {},
        create: {
            userId: studentUser1.userId,
            studentPhone: '0901234567',
            parentPhone: '0987654321',
            grade: 12,
            school: 'Tr∆∞·ªùng THPT Nguy·ªÖn Hu·ªá',
        },
    });

    const student2 = await prisma.student.upsert({
        where: { userId: studentUser2.userId },
        update: {},
        create: {
            userId: studentUser2.userId,
            studentPhone: '0901234568',
            parentPhone: '0987654322',
            grade: 11,
            school: 'Tr∆∞·ªùng THPT L√™ L·ª£i',
        },
    });

    // 7. G√°n student role b·∫±ng UserRole
    await prisma.userRole.upsert({
        where: {
            userId_roleId: {
                userId: studentUser1.userId,
                roleId: studentRole.roleId,
            },
        },
        update: {},
        create: {
            userId: studentUser1.userId,
            roleId: studentRole.roleId,
            assignedBy: adminUser.userId, // ƒê∆∞·ª£c admin c·∫•p
            expiresAt: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000), // H·∫øt h·∫°n sau 1 nƒÉm
        },
    });

    await prisma.userRole.upsert({
        where: {
            userId_roleId: {
                userId: studentUser2.userId,
                roleId: studentRole.roleId,
            },
        },
        update: {},
        create: {
            userId: studentUser2.userId,
            roleId: studentRole.roleId,
            assignedBy: adminUser.userId, // ƒê∆∞·ª£c admin c·∫•p
            expiresAt: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000), // H·∫øt h·∫°n sau 1 nƒÉm
        },
    });

    console.log(`‚úÖ Student users created: ${studentUser1.username}, ${studentUser2.username}`);

    // 8. T·∫°o subjects
    console.log('üìñ Seeding subjects...');
    const mathSubject = await prisma.subject.upsert({
        where: { name: 'To√°n h·ªçc' },
        update: {},
        create: {
            name: 'To√°n h·ªçc',
            code: 'MATH',
        },
    });

    const physicsSubject = await prisma.subject.upsert({
        where: { name: 'V·∫≠t l√Ω' },
        update: {},
        create: {
            name: 'V·∫≠t l√Ω',
            code: 'PHY',
        },
    });

    const chemistrySubject = await prisma.subject.upsert({
        where: { name: 'H√≥a h·ªçc' },
        update: {},
        create: {
            name: 'H√≥a h·ªçc',
            code: 'CHEM',
        },
    });

    console.log(`‚úÖ Subjects created: ${mathSubject.name}, ${physicsSubject.name}, ${chemistrySubject.name}`);

    // 9. T·∫°o chapters cho m√¥n To√°n t·ª´ d·ªØ li·ªáu th·ª±c
    console.log('üìë Seeding real Math chapters...');

    // L∆∞u tr·ªØ chapters cha ƒë·ªÉ tham chi·∫øu
    const parentChapters = new Map();
    let totalChapters = 0;
    let rootChapters = 0;
    let subChapters = 0;

    // GRADE 10 CHAPTERS
    console.log('üìö Creating Grade 10 chapters...');

    // 10C1 - M·ªÜNH ƒê·ªÄ V√Ä T·∫¨P H·ª¢P (Chapter cha)
    const chap_10c1 = await prisma.chapter.upsert({
        where: { slug: '10c1' },
        update: {},
        create: {
            subjectId: mathSubject.subjectId,
            name: 'M·ªÜNH ƒê·ªÄ V√Ä T·∫¨P H·ª¢P',
            slug: '10c1',
            parentChapterId: null,
            orderInParent: 1,
            level: 0,
        },
    });
    parentChapters.set('10c1', chap_10c1);
    totalChapters++; rootChapters++;

    // 10C11, 10C12 - Chapters con c·ªßa 10C1
    await prisma.chapter.upsert({
        where: { slug: '10c11' },
        update: {},
        create: {
            subjectId: mathSubject.subjectId,
            name: 'M·ªánh ƒë·ªÅ',
            slug: '10c11',
            parentChapterId: chap_10c1.chapterId,
            orderInParent: 1,
            level: 1,
        },
    });
    totalChapters++; subChapters++;

    await prisma.chapter.upsert({
        where: { slug: '10c12' },
        update: {},
        create: {
            subjectId: mathSubject.subjectId,
            name: 'T·∫≠p h·ª£p v√† c√°c ph√©p to√°n tr√™n t·∫≠p h·ª£p',
            slug: '10c12',
            parentChapterId: chap_10c1.chapterId,
            orderInParent: 2,
            level: 1,
        },
    });
    totalChapters++; subChapters++;

    // 10C2 - B·∫§T PH∆Ø∆†NG TR√åNH V√Ä H·ªÜ B·∫§T PH∆Ø∆†NG TR√åNH B·∫¨C NH·∫§T HAI ·∫®N
    const chap_10c2 = await prisma.chapter.upsert({
        where: { slug: '10c2' },
        update: {},
        create: {
            subjectId: mathSubject.subjectId,
            name: 'B·∫§T PH∆Ø∆†NG TR√åNH V√Ä H·ªÜ B·∫§T PH∆Ø∆†NG TR√åNH B·∫¨C NH·∫§T HAI ·∫®N',
            slug: '10c2',
            parentChapterId: null,
            orderInParent: 2,
            level: 0,
        },
    });
    parentChapters.set('10c2', chap_10c2);
    totalChapters++; rootChapters++;

    // 10C21, 10C22 - Chapters con c·ªßa 10C2
    await prisma.chapter.upsert({
        where: { slug: '10c21' },
        update: {},
        create: {
            subjectId: mathSubject.subjectId,
            name: 'B·∫•t ph∆∞∆°ng tr√¨nh b·∫≠c nh·∫•t hai ·∫©n',
            slug: '10c21',
            parentChapterId: chap_10c2.chapterId,
            orderInParent: 1,
            level: 1,
        },
    });
    totalChapters++; subChapters++;

    await prisma.chapter.upsert({
        where: { slug: '10c22' },
        update: {},
        create: {
            subjectId: mathSubject.subjectId,
            name: 'H·ªá b·∫•t ph∆∞∆°ng tr√¨nh b·∫≠c nh·∫•t hai ·∫©n',
            slug: '10c22',
            parentChapterId: chap_10c2.chapterId,
            orderInParent: 2,
            level: 1,
        },
    });
    totalChapters++; subChapters++;

    // Ti·∫øp t·ª•c v·ªõi c√°c chapters c√≤n l·∫°i...
    // 10C3 - H·ªÜ TH·ª®C L∆Ø·ª¢NG TRONG TAM GI√ÅC
    const chap_10c3 = await prisma.chapter.upsert({
        where: { slug: '10c3' },
        update: {},
        create: {
            subjectId: mathSubject.subjectId,
            name: 'H·ªÜ TH·ª®C L∆Ø·ª¢NG TRONG TAM GI√ÅC',
            slug: '10c3',
            parentChapterId: null,
            orderInParent: 3,
            level: 0,
        },
    });
    totalChapters++; rootChapters++;

    await prisma.chapter.upsert({
        where: { slug: '10c31' },
        update: {},
        create: {
            subjectId: mathSubject.subjectId,
            name: 'Gi√° tr·ªã l∆∞·ª£ng gi√°c c·ªßa m·ªôt g√≥c t·ª´ 0¬∞ ƒë·∫øn 180¬∞',
            slug: '10c31',
            parentChapterId: chap_10c3.chapterId,
            orderInParent: 1,
            level: 1,
        },
    });
    totalChapters++; subChapters++;

    await prisma.chapter.upsert({
        where: { slug: '10c32' },
        update: {},
        create: {
            subjectId: mathSubject.subjectId,
            name: 'H·ªá th·ª©c l∆∞·ª£ng trong tam gi√°c¬∞',
            slug: '10c32',
            parentChapterId: chap_10c3.chapterId,
            orderInParent: 2,
            level: 1,
        },
    });
    totalChapters++; subChapters++;

    // 10C4 - VECT∆† (v·ªõi nhi·ªÅu sub-chapters)
    const chap_10c4 = await prisma.chapter.upsert({
        where: { slug: '10c4' },
        update: {},
        create: {
            subjectId: mathSubject.subjectId,
            name: 'VECT∆†',
            slug: '10c4',
            parentChapterId: null,
            orderInParent: 4,
            level: 0,
        },
    });
    totalChapters++; rootChapters++;

    // Sub-chapters c·ªßa VECT∆†
    const vectorSubChapters = [
        { slug: '10c41', name: 'C√°c kh√°i ni·ªám m·ªü ƒë·∫ßu', order: 1 },
        { slug: '10c42', name: 'T·ªïng v√† hi·ªáu c·ªßa hai vect∆°', order: 2 },
        { slug: '10c43', name: 'T√≠ch c·ªßa m·ªôt vect∆° v·ªõi m·ªôt s·ªë', order: 3 },
        { slug: '10c44', name: 'Vect∆° trong m·∫∑t ph·∫≥ng to·∫° ƒë·ªô', order: 4 },
        { slug: '10c45', name: 'T√≠ch v√¥ h∆∞·ªõng c·ªßa hai vect∆°', order: 5 },
    ];

    for (const sub of vectorSubChapters) {
        await prisma.chapter.upsert({
            where: { slug: sub.slug },
            update: {},
            create: {
                subjectId: mathSubject.subjectId,
                name: sub.name,
                slug: sub.slug,
                parentChapterId: chap_10c4.chapterId,
                orderInParent: sub.order,
                level: 1,
            },
        });
        totalChapters++; subChapters++;
    }

    console.log(`‚úÖ Grade 10 chapters created successfully`);

    // GRADE 11 CHAPTERS - T·∫°o m·ªôt s·ªë chapters ch√≠nh
    console.log('üìö Creating Grade 11 chapters...');

    // 11C1 - H√ÄM S·ªê L∆Ø·ª¢NG GI√ÅC V√Ä PH∆Ø∆†NG TR√åNH L∆Ø·ª¢NG GI√ÅC
    const chap_11c1 = await prisma.chapter.upsert({
        where: { slug: '11c1' },
        update: {},
        create: {
            subjectId: mathSubject.subjectId,
            name: 'H√ÄM S·ªê L∆Ø·ª¢NG GI√ÅC V√Ä PH∆Ø∆†NG TR√åNH L∆Ø·ª¢NG GI√ÅC',
            slug: '11c1',
            parentChapterId: null,
            orderInParent: 1,
            level: 0,
        },
    });
    totalChapters++; rootChapters++;

    // Sub-chapters c·ªßa 11C1
    const trigSubChapters = [
        { slug: '11c11', name: 'Gi√° tr·ªã l∆∞·ª£ng gi√°c c·ªßa g√≥c l∆∞·ª£ng gi√°c', order: 1 },
        { slug: '11c12', name: 'C√¥ng th·ª©c l∆∞·ª£ng gi√°c', order: 2 },
        { slug: '11c13', name: 'H√†m s·ªë l∆∞·ª£ng gi√°c', order: 3 },
        { slug: '11c14', name: 'Ph∆∞∆°ng tr√¨nh l∆∞·ª£ng gi√°c c∆° b·∫£n', order: 4 },
    ];

    for (const sub of trigSubChapters) {
        await prisma.chapter.upsert({
            where: { slug: sub.slug },
            update: {},
            create: {
                subjectId: mathSubject.subjectId,
                name: sub.name,
                slug: sub.slug,
                parentChapterId: chap_11c1.chapterId,
                orderInParent: sub.order,
                level: 1,
            },
        });
        totalChapters++; subChapters++;
    }

    // GRADE 12 CHAPTERS - T·∫°o m·ªôt s·ªë chapters ch√≠nh
    console.log('üìö Creating Grade 12 chapters...');

    // 12C1 - ·ª®NG D·ª§NG ƒê·∫†O H√ÄM ƒê·ªÇ KH·∫¢O S√ÅT V√Ä V·∫º ƒê·ªí TH·ªä H√ÄM S·ªê
    const chap_12c1 = await prisma.chapter.upsert({
        where: { slug: '12c1' },
        update: {},
        create: {
            subjectId: mathSubject.subjectId,
            name: '·ª®NG D·ª§NG ƒê·∫†O H√ÄM ƒê·ªÇ KH·∫¢O S√ÅT V√Ä V·∫º ƒê·ªí TH·ªä H√ÄM S·ªê',
            slug: '12c1',
            parentChapterId: null,
            orderInParent: 1,
            level: 0,
        },
    });
    totalChapters++; rootChapters++;

    // Sub-chapters c·ªßa 12C1
    const derivativeSubChapters = [
        { slug: '12c11', name: 'T√≠nh ƒë∆°n ƒëi·ªáu v√† c·ª±c tr·ªã c·ªßa h√†m s·ªë', order: 1 },
        { slug: '12c12', name: 'Gi√° tr·ªã l·ªõn nh·∫•t v√† gi√° tr·ªã nh·ªè nh·∫•t c·ªßa h√†m s·ªë', order: 2 },
        { slug: '12c13', name: 'ƒê∆∞·ªùng ti·ªám c·∫≠n c·ªßa ƒë·ªì th·ªã h√†m s·ªë', order: 3 },
        { slug: '12c14', name: 'Kh·∫£o s√°t s·ª± bi·∫øn thi√™n v√† v·∫Ω ƒë·ªì th·ªã c·ªßa h√†m s·ªë', order: 4 },
        { slug: '12c15', name: '·ª®ng d·ª•ng ƒë·∫°o h√†m ƒë·ªÉ gi·∫£i quy·∫øt m·ªôt s·ªë v·∫•n ƒë·ªÅ li√™n quan ƒë·∫øn th·ª±c ti·ªÖn', order: 5 },
    ];

    for (const sub of derivativeSubChapters) {
        await prisma.chapter.upsert({
            where: { slug: sub.slug },
            update: {},
            create: {
                subjectId: mathSubject.subjectId,
                name: sub.name,
                slug: sub.slug,
                parentChapterId: chap_12c1.chapterId,
                orderInParent: sub.order,
                level: 1,
            },
        });
        totalChapters++; subChapters++;
    }

    // 12C4 - NGUY√äN H√ÄM V√Ä T√çCH PH√ÇN
    const chap_12c4 = await prisma.chapter.upsert({
        where: { slug: '12c4' },
        update: {},
        create: {
            subjectId: mathSubject.subjectId,
            name: 'NGUY√äN H√ÄM V√Ä T√çCH PH√ÇN',
            slug: '12c4',
            parentChapterId: null,
            orderInParent: 4,
            level: 0,
        },
    });
    totalChapters++; rootChapters++;

    // Sub-chapters c·ªßa 12C4
    const integralSubChapters = [
        { slug: '12c41', name: 'Nguy√™n h√†m', order: 1 },
        { slug: '12c42', name: 'T√≠ch ph√¢n', order: 2 },
        { slug: '12c43', name: '·ª®ng d·ª•ng h√¨nh h·ªçc c·ªßa t√≠ch ph√¢n', order: 3 },
    ];

    for (const sub of integralSubChapters) {
        await prisma.chapter.upsert({
            where: { slug: sub.slug },
            update: {},
            create: {
                subjectId: mathSubject.subjectId,
                name: sub.name,
                slug: sub.slug,
                parentChapterId: chap_12c4.chapterId,
                orderInParent: sub.order,
                level: 1,
            },
        });
        totalChapters++; subChapters++;
    }

    console.log(`‚úÖ Math chapters created: ${rootChapters} root chapters with ${subChapters} sub-chapters (Total: ${totalChapters} chapters)`);

    // 10. T·∫°o courses
    console.log('üìö Seeding courses...');
    const mathCourse = await prisma.course.upsert({
        where: { courseId: 1 },
        update: {},
        create: {
            title: 'To√°n h·ªçc 12',
            subtitle: 'Kh√≥a h·ªçc To√°n h·ªçc l·ªõp 12',
            grade: '12',
            subjectId: mathSubject.subjectId,
            teacherId: adminRecord.adminId,
            priceCents: 200000000, // 2,000,000 VND * 100
            visibility: 'PUBLISHED',
        },
    });

    const physicsCourse = await prisma.course.upsert({
        where: { courseId: 2 },
        update: {},
        create: {
            title: 'V·∫≠t l√Ω 12',
            subtitle: 'Kh√≥a h·ªçc V·∫≠t l√Ω l·ªõp 12',
            grade: '12',
            subjectId: physicsSubject.subjectId,
            teacherId: adminRecord.adminId,
            priceCents: 180000000, // 1,800,000 VND * 100
            visibility: 'PUBLISHED',
        },
    });

    const chemistryCourse = await prisma.course.upsert({
        where: { courseId: 3 },
        update: {},
        create: {
            title: 'H√≥a h·ªçc 12',
            subtitle: 'Kh√≥a h·ªçc H√≥a h·ªçc l·ªõp 12',
            grade: '12',
            subjectId: chemistrySubject.subjectId,
            teacherId: adminRecord.adminId,
            priceCents: 190000000, // 1,900,000 VND * 100
            visibility: 'PUBLISHED',
        },
    });

    console.log(`‚úÖ Courses created: ${mathCourse.title}, ${physicsCourse.title}, ${chemistryCourse.title}`);

    // 10. T·∫°o exams
    console.log('üìù Seeding exams...');
    const mathExam = await prisma.exam.upsert({
        where: { examId: 1 },
        update: {},
        create: {
            title: 'Ki·ªÉm tra To√°n h·ªçc - Ch∆∞∆°ng 1',
            description: 'B√†i ki·ªÉm tra ch∆∞∆°ng 1 m√¥n To√°n',
            grade: 12,
            subjectId: mathSubject.subjectId,
            createdBy: adminRecord.adminId,
        },
    });

    const physicsExam = await prisma.exam.upsert({
        where: { examId: 2 },
        update: {},
        create: {
            title: 'Ki·ªÉm tra V·∫≠t l√Ω - Ch∆∞∆°ng 1',
            description: 'B√†i ki·ªÉm tra ch∆∞∆°ng 1 m√¥n V·∫≠t l√Ω',
            grade: 12,
            subjectId: physicsSubject.subjectId,
            createdBy: adminRecord.adminId,
        },
    });

    console.log(`‚úÖ Exams created: ${mathExam.title}, ${physicsExam.title}`);

    console.log('üéâ Seed completed successfully!');
    console.log(`
üìä Summary:
- Roles: 5 (SUPER_ADMIN, ADMIN, PERMISSIONS_USER, TEACHER, STUDENT) v·ªõi role hierarchy
- Admin users: 2 (minhduc7904, admin) 
- Student users: 2 (student1, student2)
- User roles: 5 assignments v·ªõi expiration dates
- Subjects: 6 (To√°n h·ªçc, V·∫≠t l√Ω, H√≥a h·ªçc, Ng·ªØ vƒÉn, Ti·∫øng Anh, Sinh h·ªçc)
- Chapters: To√°n h·ªçc t·ª´ l·ªõp 10-12 (root chapters + sub-chapters theo ch∆∞∆°ng tr√¨nh th·ª±c)
- Courses: 3 (To√°n h·ªçc 12, V·∫≠t l√Ω 12, H√≥a h·ªçc 12)
- Exams: 2 (Ki·ªÉm tra To√°n h·ªçc - Ch∆∞∆°ng 1, Ki·ªÉm tra V·∫≠t l√Ω - Ch∆∞∆°ng 1)

üîë Login credentials:
- minhduc7904 / 070904 (SUPER_ADMIN role)
- admin / 070904 (ADMIN + PERMISSIONS_USER + TEACHER roles)
- student1 / student123 (STUDENT role - expires in 1 year)
- student2 / student123 (STUDENT role - expires in 1 year)

üîê Role hierarchy:
- SUPER_ADMIN ‚Üí c√≥ th·ªÉ c·∫•p m·ªçi role
- ADMIN ‚Üí c·∫ßn c√≥ ƒë·ªÉ c·∫•p PERMISSIONS_USER
- PERMISSIONS_USER ‚Üí c·∫ßn c√≥ ƒë·ªÉ c·∫•p TEACHER, STUDENT
- TEACHER/STUDENT ‚Üí kh√¥ng c·∫•p ƒë∆∞·ª£c role n√†o
    `);
}

main()
    .catch((e) => {
        console.error('‚ùå Seed failed:', e);
        process.exit(1);
    })
    .finally(async () => {
        await prisma.$disconnect();
    });
